#!/bin/bash

# üöÄ PIPELINE DE CONSOLIDATION DES DONN√âES IMMOBILI√àRES
# ======================================================
# Script bash pour ex√©cuter le pipeline modulaire

# Configuration
PROJECT_ROOT="/Users/zecklimonsso/GitHub/realestate-analysis"
VENV_PATH="$PROJECT_ROOT/.venv"
PIPELINE_SCRIPT="$PROJECT_ROOT/etl/data-consolidation-pipeline/main_modular_pipeline.py"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification de l'environnement
check_environment() {
    print_status "V√©rification de l'environnement..."
    
    if [ ! -d "$PROJECT_ROOT" ]; then
        print_error "R√©pertoire projet non trouv√©: $PROJECT_ROOT"
        exit 1
    fi
    
    if [ ! -d "$VENV_PATH" ]; then
        print_error "Environnement virtuel non trouv√©: $VENV_PATH"
        exit 1
    fi
    
    if [ ! -f "$PIPELINE_SCRIPT" ]; then
        print_error "Script pipeline non trouv√©: $PIPELINE_SCRIPT"
        exit 1
    fi
    
    print_success "Environnement v√©rifi√©"
}

# Ex√©cution du pipeline
run_pipeline() {
    print_status "üöÄ D√©marrage du pipeline de consolidation..."
    print_status "üìä Source: MongoDB (real_estate_db.properties)"
    print_status "üéØ Requ√™te: Trois-Rivi√®res Plex"
    print_status "üìÅ Sortie: etl/data-consolidation-pipeline/exports/trois_rivieres_plex"
    
    cd "$PROJECT_ROOT"
    
    # Ex√©cution avec l'environnement virtuel
    "$VENV_PATH/bin/python" "$PIPELINE_SCRIPT" \
        --source mongodb \
        --mongodb-db real_estate_db \
        --mongodb-collection properties \
        --mongodb-query-file etl/data-consolidation-pipeline/examples/query_trois_rivieres_plex.json \
        --limit 1 \
        --output etl/data-consolidation-pipeline/exports/trois_rivieres_plex \
        --formats csv \
        --optimization medium
    
    # V√©rification du code de sortie
    if [ $? -eq 0 ]; then
        print_success "Pipeline ex√©cut√© avec succ√®s !"
        print_status "üìÅ Fichiers g√©n√©r√©s dans: etl/data-consolidation-pipeline/exports/trois_rivieres_plex"
    else
        print_error "Erreur lors de l'ex√©cution du pipeline"
        exit 1
    fi
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Afficher cette aide"
    echo "  -v, --verbose  Mode verbeux"
    echo "  -c, --check    V√©rifier l'environnement uniquement"
    echo ""
    echo "Exemples:"
    echo "  $0                    # Ex√©cuter le pipeline"
    echo "  $0 --check           # V√©rifier l'environnement"
    echo "  $0 --help            # Afficher l'aide"
}

# Parsing des arguments
VERBOSE=false
CHECK_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -c|--check)
            CHECK_ONLY=true
            shift
            ;;
        *)
            print_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Mode verbeux
if [ "$VERBOSE" = true ]; then
    set -x
fi

# V√©rification de l'environnement
check_environment

# Si seulement v√©rification demand√©e
if [ "$CHECK_ONLY" = true ]; then
    print_success "V√©rification termin√©e - environnement pr√™t"
    exit 0
fi

# Ex√©cution du pipeline
run_pipeline

print_success "üéâ Script termin√© avec succ√®s !"

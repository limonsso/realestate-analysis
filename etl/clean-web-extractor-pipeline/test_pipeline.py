#!/usr/bin/env python3
"""
Script de test simple pour v√©rifier le pipeline
Teste les composants principaux sans ex√©cuter l'extraction compl√®te
"""

import sys
import asyncio
from pathlib import Path

# Ajout des chemins au PYTHONPATH
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir / "src"))
sys.path.insert(0, str(current_dir / "config"))

def test_imports():
    """Teste l'import des modules principaux"""
    print("üîç Test des imports...")
    
    try:
        from src.models.property import Property, PropertyType, PropertyStatus
        from src.extractors.centris_extractor import CentrisExtractor
        from src.services.database_service import DatabaseService
        from src.utils.logging import setup_logging, get_logger
        from config.settings import config
        print("‚úÖ Tous les imports r√©ussis")
        return True
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_config():
    """Teste la configuration"""
    print("üîß Test de la configuration...")
    
    try:
        from config.settings import config
        
        # V√©rification des √©l√©ments de base
        assert hasattr(config, 'centris'), "Configuration Centris manquante"
        assert hasattr(config, 'database'), "Configuration base de donn√©es manquante"
        assert len(config.centris.locations_searched) > 0, "Aucune localisation configur√©e"
        assert len(config.centris.property_types) > 0, "Aucun type de propri√©t√© configur√©"
        
        print(f"‚úÖ Configuration valide:")
        print(f"   - {len(config.centris.locations_searched)} localisations")
        print(f"   - {len(config.centris.property_types)} types de propri√©t√©s")
        print(f"   - Base de donn√©es: {config.database.server_url}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        return False

def test_models():
    """Teste les mod√®les de donn√©es"""
    print("üìä Test des mod√®les...")
    
    try:
        from src.models.property import Property, PropertyType, PropertyStatus, Address, FinancialInfo
        
        # Cr√©ation d'une propri√©t√© de test
        test_property = Property(
            id="TEST123",
            type=PropertyType.SINGLE_FAMILY_HOME,
            status=PropertyStatus.FOR_SALE,
            address=Address(
                street="123 Test St",
                city="Test City",
                region="Test Region"
            ),
            financial=FinancialInfo(
                price=500000
            )
        )
        
        # V√©rification des propri√©t√©s calcul√©es
        assert test_property.id == "TEST123", "ID incorrect"
        assert test_property.type == PropertyType.SINGLE_FAMILY_HOME, "Type incorrect"
        assert test_property.financial.price == 500000, "Prix incorrect"
        
        print("‚úÖ Mod√®les de donn√©es valides")
        return True
    except Exception as e:
        print(f"‚ùå Erreur des mod√®les: {e}")
        return False

def test_logging():
    """Teste le syst√®me de logging"""
    print("üìù Test du logging...")
    
    try:
        from src.utils.logging import setup_logging, get_logger
        
        # Configuration du logging
        setup_logging(log_level="INFO", log_format="console")
        
        # Test du logger
        logger = get_logger("test")
        logger.info("Test de logging r√©ussi")
        
        print("‚úÖ Syst√®me de logging fonctionnel")
        return True
    except Exception as e:
        print(f"‚ùå Erreur du logging: {e}")
        return False

async def test_extractor():
    """Teste l'extracteur (sans connexion r√©seau)"""
    print("üîç Test de l'extracteur...")
    
    try:
        from src.extractors.centris_extractor import CentrisExtractor
        from config.settings import config
        
        # Cr√©ation de l'extracteur
        extractor = CentrisExtractor(config.centris)
        
        # Test de la configuration
        assert extractor.base_url == "https://www.centris.ca", "URL de base incorrecte"
        assert extractor.config == config.centris, "Configuration incorrecte"
        
        print("‚úÖ Extracteur configur√© correctement")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de l'extracteur: {e}")
        return False

def test_database_service():
    """Teste le service de base de donn√©es (sans connexion)"""
    print("üóÑÔ∏è Test du service de base de donn√©es...")
    
    try:
        from src.services.database_service import DatabaseService
        from config.settings import config
        
        # Cr√©ation du service (sans connexion)
        db_service = DatabaseService(config.database)
        
        # V√©rification de la configuration
        assert db_service.config == config.database, "Configuration incorrecte"
        assert db_service.config.server_url == config.database.server_url, "URL serveur incorrecte"
        
        # Test de la configuration des noms de collections
        db_service.set_collection_names(
            properties_collection="test_properties",
            summaries_collection="test_summaries",
            logs_collection="test_logs"
        )
        
        assert db_service.collection_names['properties'] == "test_properties", "Nom de collection propri√©t√©s incorrect"
        assert db_service.collection_names['summaries'] == "test_summaries", "Nom de collection r√©sum√©s incorrect"
        assert db_service.collection_names['logs'] == "test_logs", "Nom de collection logs incorrect"
        
        print("‚úÖ Service de base de donn√©es configur√©")
        return True
    except Exception as e:
        print(f"‚ùå Erreur du service de base de donn√©es: {e}")
        return False

async def test_validation_functionality():
    """Teste la fonctionnalit√© de validation des r√©sultats"""
    print("üîç Test de la fonctionnalit√© de validation...")
    
    try:
        from src.extractors.centris_extractor import CentrisExtractor
        from src.models.property import PropertySummary, Address, PropertyType, SearchQuery
        from src.utils.validators import RegionValidator, PropertyValidator
        from config.settings import config
        
        # Test des validateurs de base
        print("  üîç Test des validateurs de base...")
        
        # Test validation des r√©gions
        assert RegionValidator.is_valid_region("Montr√©al") == True
        assert RegionValidator.is_valid_region("InvalidRegion") == False
        print("    ‚úÖ Validation des r√©gions")
        
        # Test validation des prix
        assert PropertyValidator.is_valid_price(250000) == True
        assert PropertyValidator.is_valid_price(-1000) == False
        print("    ‚úÖ Validation des prix")
        
        # Test validation des codes postaux
        assert PropertyValidator.is_valid_postal_code("H1A 1A1") == True
        assert PropertyValidator.is_valid_postal_code("12345") == False
        print("    ‚úÖ Validation des codes postaux")
        
        # Cr√©ation d'un extracteur de test
        extractor = CentrisExtractor(config.centris)
        
        # Cr√©ation de donn√©es de test
        test_properties = [
            PropertySummary(
                id="test1",
                address=Address(city="Montr√©al", region="Qu√©bec"),
                type=PropertyType.CONDO,
                price=250000
            ),
            PropertySummary(
                id="test2", 
                address=Address(city="Montr√©al", region="Qu√©bec"),
                type=PropertyType.CONDO,
                price=300000
            ),
            PropertySummary(
                id="test3",
                address=Address(city="Laval", region="Qu√©bec"), 
                type=PropertyType.CONDO,
                price=275000
            )
        ]
        
        # Test de validation avec crit√®res correspondants
        search_query = SearchQuery(
            locations=["Montr√©al"],
            property_types=[PropertyType.CONDO]
        )
        
        # Test de la validation des localisations
        location_valid = extractor._validate_locations_searched(test_properties, ["Montr√©al"])
        print(f"‚úÖ Validation des localisations: {location_valid}")
        
        # Test de la validation des types
        type_valid = extractor._validate_property_types(test_properties, [PropertyType.CONDO])
        print(f"‚úÖ Validation des types: {type_valid}")
        
        # Test de la validation globale
        is_valid = extractor._validate_search_results(test_properties, search_query)
        print(f"‚úÖ Validation globale: {is_valid}")
        
        if is_valid:
            print("‚úÖ Toutes les validations fonctionnent correctement")
            return True
        else:
            print("‚ùå Validation des r√©sultats √©choue")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur du test de validation: {e}")
        return False

async def main():
    """Fonction principale de test"""
    print("üß™ D√©marrage des tests du pipeline...")
    print("=" * 50)
    
    # Liste des tests √† ex√©cuter
    tests = [
        ("Imports", test_imports),
        ("Configuration", test_config),
        ("Mod√®les", test_models),
        ("Logging", test_logging),
        ("Extracteur", test_extractor),
        ("Base de donn√©es", test_database_service),
        ("Validation", test_validation_functionality),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç Test: {test_name}")
        print("-" * 30)
        
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 50)
    print("üìä R√©sum√© des tests:")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s! Le pipeline est pr√™t √† √™tre utilis√©.")
        return True
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Tests interrompus par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        print(f"‚ùå Erreur fatale lors des tests: {e}")
        sys.exit(1)

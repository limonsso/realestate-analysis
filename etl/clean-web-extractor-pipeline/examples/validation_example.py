#!/usr/bin/env python3
"""
Exemple d'utilisation de la validation des r√©sultats de recherche
"""

import sys
import asyncio
from pathlib import Path

# Ajout des chemins au PYTHONPATH
current_dir = Path(__file__).parent.parent
sys.path.insert(0, str(current_dir / "src"))
sys.path.insert(0, str(current_dir / "config"))

from src.extractors.centris_extractor import CentrisExtractor
from src.models.property import PropertySummary, Address, PropertyType, SearchQuery
from config.settings import config

async def demonstrate_validation():
    """D√©montre la validation des r√©sultats de recherche"""
    
    print("üîç D√©monstration de la Validation des R√©sultats")
    print("=" * 60)
    
    # Cr√©ation de l'extracteur
    extractor = CentrisExtractor(config.centris)
    
    # Sc√©nario 1: R√©sultats valides (Montr√©al + Condos)
    print("\nüìã Sc√©nario 1: R√©sultats Valides")
    print("-" * 40)
    
    valid_properties = [
        PropertySummary(
            id="prop1",
            address=Address(city="Montr√©al", region="Qu√©bec"),
            type=PropertyType.CONDO,
            price=250000
        ),
        PropertySummary(
            id="prop2",
            address=Address(city="Montr√©al", region="Qu√©bec"),
            type=PropertyType.CONDO,
            price=300000
        ),
        PropertySummary(
            id="prop3",
            address=Address(city="Montr√©al", region="Qu√©bec"),
            type=PropertyType.CONDO,
            price=275000
        )
    ]
    
    search_query = SearchQuery(
        locations=["Montr√©al"],
        property_types=[PropertyType.CONDO]
    )
    
    print("üîç Test de validation des localisations...")
    location_valid = extractor._validate_locations_searched(valid_properties, ["Montr√©al"])
    print(f"   Localisations: {location_valid}")
    
    print("üîç Test de validation des types...")
    type_valid = extractor._validate_property_types(valid_properties, [PropertyType.CONDO])
    print(f"   Types: {type_valid}")
    
    print("üîç Test de validation globale...")
    is_valid = extractor._validate_search_results(valid_properties, search_query)
    print(f"   Global: {is_valid}")
    
    # Sc√©nario 2: R√©sultats partiellement valides
    print("\nüìã Sc√©nario 2: R√©sultats Partiellement Valides")
    print("-" * 40)
    
    mixed_properties = [
        PropertySummary(
            id="prop4",
            address=Address(city="Montr√©al", region="Qu√©bec"),
            type=PropertyType.CONDO,
            price=250000
        ),
        PropertySummary(
            id="prop5",
            address=Address(city="Laval", region="Qu√©bec"),  # Mauvais ville
            type=PropertyType.CONDO,
            price=300000
        ),
        PropertySummary(
            id="prop6",
            address=Address(city="Montr√©al", region="Qu√©bec"),
            type=PropertyType.SINGLE_FAMILY_HOME,  # Mauvais type
            price=275000
        )
    ]
    
    print("üîç Test de validation des localisations...")
    location_valid_mixed = extractor._validate_locations_searched(mixed_properties, ["Montr√©al"])
    print(f"   Localisations: {location_valid_mixed}")
    
    print("üîç Test de validation des types...")
    type_valid_mixed = extractor._validate_property_types(mixed_properties, [PropertyType.CONDO])
    print(f"   Types: {type_valid_mixed}")
    
    print("üîç Test de validation globale...")
    is_valid_mixed = extractor._validate_search_results(mixed_properties, search_query)
    print(f"   Global: {is_valid_mixed}")
    
    # Sc√©nario 3: R√©sultats invalides
    print("\nüìã Sc√©nario 3: R√©sultats Invalides")
    print("-" * 40)
    
    invalid_properties = [
        PropertySummary(
            id="prop7",
            address=Address(city="Laval", region="Qu√©bec"),
            type=PropertyType.SINGLE_FAMILY_HOME,
            price=250000
        ),
        PropertySummary(
            id="prop8",
            address=Address(city="Brossard", region="Qu√©bec"),
            type=PropertyType.PLEX,
            price=300000
        ),
        PropertySummary(
            id="prop9",
            address=Address(city="Longueuil", region="Qu√©bec"),
            type=PropertyType.RESIDENTIAL_LOT,
            price=275000
        )
    ]
    
    print("üîç Test de validation des localisations...")
    location_valid_invalid = extractor._validate_locations_searched(invalid_properties, ["Montr√©al"])
    print(f"   Localisations: {location_valid_invalid}")
    
    print("üîç Test de validation des types...")
    type_valid_invalid = extractor._validate_property_types(invalid_properties, [PropertyType.CONDO])
    print(f"   Types: {type_valid_invalid}")
    
    print("üîç Test de validation globale...")
    is_valid_invalid = extractor._validate_search_results(invalid_properties, search_query)
    print(f"   Global: {is_valid_invalid}")
    
    print("\nüéØ R√©sum√© de la Validation")
    print("-" * 40)
    print("‚úÖ Sc√©nario 1: 100% correspondance ‚Üí Validation r√©ussie")
    print("‚ö†Ô∏è Sc√©nario 2: 33% correspondance ‚Üí Validation √©choue")
    print("‚ùå Sc√©nario 3: 0% correspondance ‚Üí Validation √©choue")
    print("\nüí° La validation s'arr√™te si moins de 70% des r√©sultats correspondent")
    print("üí° Les deux validations (localisation + type) doivent r√©ussir")

if __name__ == "__main__":
    try:
        asyncio.run(demonstrate_validation())
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        sys.exit(1)

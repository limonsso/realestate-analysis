#!/usr/bin/env python3
"""
Test d'extraction r√©elle avec la nouvelle structure Centris et LocationConfig
Teste l'architecture modulaire avec de vraies donn√©es et la structure API valid√©e
"""

import asyncio
import structlog
from src.extractors.centris_extractor import CentrisExtractor
from config.settings import config, LocationConfig
from src.utils.logging import setup_logging
from pydantic import BaseModel
from typing import List, Optional
from enum import Enum

# Configuration du logging
setup_logging()
logger = structlog.get_logger(__name__)

# D√©finition locale des √©num√©rations et mod√®les
class PropertyType(str, Enum):
    """Types de propri√©t√©s support√©s"""
    PLEX = "Plex"
    SINGLE_FAMILY_HOME = "SingleFamilyHome"
    SELL_CONDO = "SellCondo"
    RESIDENTIAL_LOT = "ResidentialLot"

class SearchQuery(BaseModel):
    """Param√®tres de recherche de propri√©t√©s avec LocationConfig"""
    locations: List[LocationConfig]
    property_types: List[PropertyType]  # Utilisant PropertyType pour compatibilit√©
    price_min: Optional[float] = None
    price_max: Optional[float] = None


async def test_real_extraction_with_location_config():
    """Test d'extraction r√©elle avec LocationConfig"""
    logger.info("üöÄ D√©marrage du test d'extraction r√©elle avec LocationConfig...")
    
    extractor = None
    try:
        # Initialisation de l'extracteur
        logger.info("üîß Initialisation du CentrisExtractor...")
        extractor = CentrisExtractor(config.centris)
        
        # Test 1: Extraction avec GeographicArea (R√©gion)
        logger.info("üìç Test 1: Extraction avec GeographicArea (R√©gion)")
        search_query_region = SearchQuery(
            locations=[
                LocationConfig(
                    type="GeographicArea",
                    value="Mont√©r√©gie",
                    type_id="RARA16"
                )
            ],
            property_types=[PropertyType.PLEX],
            price_min=200000,
            price_max=260000
        )
        
        logger.info(f"üîç Recherche: {search_query_region.locations[0].value} - {search_query_region.property_types}")
        summaries_region = await extractor.extract_summaries(search_query_region)
        
        if summaries_region:
            logger.info(f"‚úÖ Test 1 R√©ussi: {len(summaries_region)} propri√©t√©s trouv√©es en Mont√©r√©gie")
            
            # Validation des donn√©es extraites
            for i, summary in enumerate(summaries_region[:3], 1):
                logger.info(f"   üè† Propri√©t√© {i}: {summary.type if hasattr(summary, 'type') else 'N/A'} - {summary.price if hasattr(summary, 'price') else 'N/A'}$ - {summary.address.city if hasattr(summary, 'address') else 'N/A'}")
        else:
            logger.warning("‚ö†Ô∏è Test 1: Aucune propri√©t√© trouv√©e en Mont√©r√©gie")
            
        # Test 2: Extraction avec CityDistrict (District de ville)
        logger.info("üèôÔ∏è Test 2: Extraction avec CityDistrict (District de ville)")
        search_query_district = SearchQuery(
            locations=[
                LocationConfig(
                    type="CityDistrict",
                    value="Vieux-Montr√©al",
                    type_id=449
                )
            ],
            property_types=[PropertyType.SELL_CONDO],
            price_min=200000,
            price_max=260000
        )
        
        logger.info(f"üîç Recherche: {search_query_district.locations[0].value} - {search_query_district.property_types}")
        summaries_district = await extractor.extract_summaries(search_query_district)
        
        if summaries_district:
            logger.info(f"‚úÖ Test 2 R√©ussi: {len(summaries_district)} propri√©t√©s trouv√©es dans le Vieux-Montr√©al")
            
            # Validation des donn√©es extraites
            for i, summary in enumerate(summaries_district[:3], 1):
                logger.info(f"   üè† Propri√©t√© {i}: {summary.type if hasattr(summary, 'type') else 'N/A'} - {summary.price if hasattr(summary, 'price') else 'N/A'}$ - {summary.address.city if hasattr(summary, 'address') else 'N/A'}")
        else:
            logger.warning("‚ö†Ô∏è Test 2: Aucune propri√©t√© trouv√©e dans le Vieux-Montr√©al")
            
        # Test 3: Extraction avec Multiple Locations
        logger.info("üåç Test 3: Extraction avec Multiple Locations")
        search_query_multiple = SearchQuery(
            locations=[
                LocationConfig(
                    type="GeographicArea",
                    value="Laurentides", 
                    type_id="RARA15"
                ),
                LocationConfig(
                    type="CityDistrict",
                    value="Plateau-Mont-Royal",
                    type_id=450
                )
            ],
            property_types=[PropertyType.SINGLE_FAMILY_HOME],
            price_min=300000,
            price_max=360000
        )
        
        logger.info(f"üîç Recherche Multiple: {[loc.value for loc in search_query_multiple.locations]} - {search_query_multiple.property_types}")
        summaries_multiple = await extractor.extract_summaries(search_query_multiple)
        
        if summaries_multiple:
            logger.info(f"‚úÖ Test 3 R√©ussi: {len(summaries_multiple)} propri√©t√©s trouv√©es avec recherche multiple")
            
            # Validation des donn√©es extraites par localisation
            location_distribution = {}
            for summary in summaries_multiple:
                if hasattr(summary, 'address') and summary.address.city:
                    city = summary.address.city
                    location_distribution[city] = location_distribution.get(city, 0) + 1
                    
            logger.info(f"üìä Distribution par ville: {location_distribution}")
        else:
            logger.warning("‚ö†Ô∏è Test 3: Aucune propri√©t√© trouv√©e avec recherche multiple")
            
        # Test 4: Validation de la compatibilit√© avec l'ancien pipeline
        logger.info("üîó Test 4: Validation de la compatibilit√© avec l'ancien pipeline")
        
        # Cr√©ation d'une requ√™te similaire √† l'ancien format
        old_style_search = SearchQuery(
            locations=[
                LocationConfig(
                    type="GeographicArea",
                    value="Estrie",
                    type_id="RARA05"
                )
            ],
            property_types=[PropertyType.PLEX],
            price_min=200000,
            price_max=260000
        )
        
        logger.info(f"üîç Test Compatibilit√©: {old_style_search.locations[0].value}")
        summaries_compatibility = await extractor.extract_summaries(old_style_search)
        
        if summaries_compatibility:
            logger.info(f"‚úÖ Test 4 R√©ussi: {len(summaries_compatibility)} propri√©t√©s - Compatibilit√© valid√©e")
        else:
            logger.warning("‚ö†Ô∏è Test 4: Aucune propri√©t√© trouv√©e - Test de compatibilit√©")
            
        # R√©sum√© des r√©sultats
        logger.info("\n" + "="*60)
        logger.info("üìä R√âSUM√â DU TEST D'EXTRACTION R√âELLE")
        logger.info("="*60)
        
        total_found = 0
        results = [
            ("GeographicArea (Mont√©r√©gie)", len(summaries_region) if summaries_region else 0),
            ("CityDistrict (Vieux-Montr√©al)", len(summaries_district) if summaries_district else 0),
            ("Multiple Locations", len(summaries_multiple) if summaries_multiple else 0),
            ("Compatibilit√© (Estrie)", len(summaries_compatibility) if summaries_compatibility else 0)
        ]
        
        for test_name, count in results:
            total_found += count
            status = "‚úÖ" if count > 0 else "‚ö†Ô∏è"
            logger.info(f"{status} {test_name}: {count} propri√©t√©s")
            
        logger.info("-"*60)
        logger.info(f"üéØ Total des propri√©t√©s trouv√©es: {total_found}")
        
        if total_found > 0:
            logger.info("üéâ Test d'extraction r√©elle R√âUSSI !")
            logger.info("‚úÖ La nouvelle structure Centris fonctionne avec de vraies donn√©es")
            logger.info("‚úÖ L'architecture modulaire est op√©rationnelle") 
            logger.info("‚úÖ La compatibilit√© avec l'ancien pipeline est assur√©e")
        else:
            logger.warning("‚ö†Ô∏è Aucune propri√©t√© trouv√©e - V√©rifiez les param√®tres de recherche")
            
        logger.info("="*60)
        return total_found > 0
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test d'extraction r√©elle: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False
        
    finally:
        if extractor:
            await extractor.close()
            logger.info("üîå CentrisExtractor ferm√© proprement")


if __name__ == "__main__":
    asyncio.run(test_real_extraction_with_location_config())

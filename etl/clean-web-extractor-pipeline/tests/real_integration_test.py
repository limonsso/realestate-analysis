#!/usr/bin/env python3
"""
Tests d'int√©gration sur cas r√©els pour l'architecture modulaire CentrisExtractor
Teste l'extraction r√©elle de donn√©es depuis Centris avec tous les composants
"""

import asyncio
import structlog
from unittest.mock import patch
from src.extractors.centris_extractor import CentrisExtractor
from src.models.property import SearchQuery, PropertyType
from src.utils.logging import setup_logging

# Configuration du logging
setup_logging()
logger = structlog.get_logger(__name__)


class RealIntegrationTestSuite:
    """Suite de tests d'int√©gration sur cas r√©els"""
    
    def __init__(self):
        self.extractor = None
        self.test_results = []
        
    async def setup(self):
        """Configuration initiale des tests"""
        logger.info("üîß Configuration des tests d'int√©gration sur cas r√©els...")
        
        # Initialisation de l'extracteur avec architecture modulaire
        from config.settings import config
        self.extractor = CentrisExtractor(config.centris)
        
        logger.info("‚úÖ Configuration termin√©e")
        
    async def cleanup(self):
        """Nettoyage des ressources"""
        if self.extractor:
            await self.extractor.close()
            logger.info("üîå CentrisExtractor ferm√© proprement")
            
    async def test_real_search_extraction(self):
        """Test d'extraction r√©elle avec recherche simple"""
        logger.info("üîç Test d'extraction r√©elle - Recherche simple...")
        
        try:
            # Requ√™te de recherche r√©elle
            search_query = SearchQuery(
                locations=["Montr√©al"],
                property_types=[PropertyType.SELL_CONDO],
                price_min=200000,
                price_max=210000
            )
            
            # Extraction r√©elle des r√©sum√©s
            summaries = await self.extractor.extract_summaries(search_query)
            
            # Validation des r√©sultats
            if summaries:
                logger.info(f"‚úÖ Extraction r√©ussie: {len(summaries)} propri√©t√©s trouv√©es")
                
                # V√©rification de la structure des donn√©es
                for summary in summaries[:3]:  # V√©rifier les 3 premiers
                    self._validate_summary_structure(summary)
                    
                self.test_results.append(("Recherche simple", "SUCCESS", len(summaries)))
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucune propri√©t√© trouv√©e - possible probl√®me de recherche")
                self.test_results.append(("Recherche simple", "WARNING", 0))
                return True  # Pas d'erreur, juste pas de r√©sultats
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'extraction r√©elle: {e}")
            self.test_results.append(("Recherche simple", "ERROR", str(e)))
            return False
            
    async def test_real_detail_extraction(self):
        """Test d'extraction r√©elle des d√©tails d'une propri√©t√©"""
        logger.info("üè† Test d'extraction r√©elle - D√©tails d'une propri√©t√©...")
        
        try:
            # D'abord, extraire des r√©sum√©s
            search_query = SearchQuery(
                locations=["Trois-Rivi√®res"],
                property_types=[PropertyType.PLEX],
                price_min=300000,
                price_max=360000
            )
            
            summaries = await self.extractor.extract_summaries(search_query)
            
            if not summaries:
                logger.warning("‚ö†Ô∏è Aucun r√©sum√© trouv√© pour tester l'extraction des d√©tails")
                self.test_results.append(("Extraction d√©tails", "WARNING", "Pas de r√©sum√©s"))
                return True
                
            # Prendre la premi√®re propri√©t√© pour extraire les d√©tails
            first_summary = summaries[0]
            logger.info(f"üîç Extraction des d√©tails pour: {first_summary.id}")
            
            # Extraction des d√©tails r√©els
            property_details = await self.extractor.extract_details(first_summary.id)
            
            if property_details:
                logger.info(f"‚úÖ D√©tails extraits avec succ√®s pour {first_summary.id}")
                self._validate_property_structure(property_details)
                self.test_results.append(("Extraction d√©tails", "SUCCESS", first_summary.id))
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Aucun d√©tail trouv√© pour {first_summary.id}")
                self.test_results.append(("Extraction d√©tails", "WARNING", "Pas de d√©tails"))
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'extraction des d√©tails: {e}")
            self.test_results.append(("Extraction d√©tails", "ERROR", str(e)))
            return False
            
    async def test_real_validation_integration(self):
        """Test d'int√©gration r√©elle de la validation"""
        logger.info("üéØ Test d'int√©gration r√©elle - Validation des donn√©es...")
        
        try:
            # Test avec diff√©rents types de propri√©t√©s
            property_types = [
                PropertyType.PLEX,
                PropertyType.SINGLE_FAMILY_HOME,
                PropertyType.SELL_CONDO
            ]
            
            validation_results = []
            
            for prop_type in property_types:
                search_query = SearchQuery(
                                    locations=["Laval"],
                property_types=[prop_type],
                price_min=200000,
                price_max=210000
                )
                
                summaries = await self.extractor.extract_summaries(search_query)
                
                if summaries:
                    # V√©rifier que la validation fonctionne sur les vraies donn√©es
                    valid_count = sum(1 for s in summaries if s.type == prop_type)
                    total_count = len(summaries)
                    
                    validation_results.append({
                        'type': prop_type.value,
                        'total': total_count,
                        'valid': valid_count,
                        'ratio': valid_count / total_count if total_count > 0 else 0
                    })
                    
                    logger.info(f"‚úÖ {prop_type.value}: {valid_count}/{total_count} valides ({valid_count/total_count*100:.1f}%)")
                else:
                    logger.warning(f"‚ö†Ô∏è Aucun r√©sultat pour {prop_type.value}")
                    
            if validation_results:
                avg_ratio = sum(r['ratio'] for r in validation_results) / len(validation_results)
                logger.info(f"üìä Ratio de validation moyen: {avg_ratio*100:.1f}%")
                
                self.test_results.append(("Validation int√©gration", "SUCCESS", f"{avg_ratio*100:.1f}%"))
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucun r√©sultat de validation obtenu")
                self.test_results.append(("Validation int√©gration", "WARNING", "Pas de r√©sultats"))
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la validation: {e}")
            self.test_results.append(("Validation int√©gration", "ERROR", str(e)))
            return False
            
    async def test_real_component_interaction(self):
        """Test d'interaction r√©elle entre composants"""
        logger.info("üîó Test d'interaction r√©elle entre composants...")
        
        try:
            # V√©rifier que tous les composants sont initialis√©s
            components = [
                self.extractor.session_manager,
                self.extractor.search_manager,
                self.extractor.summary_extractor,
                self.extractor.detail_extractor,
                self.extractor.data_validator
            ]
            
            component_names = [
                "SessionManager",
                "SearchManager", 
                "SummaryExtractor",
                "DetailExtractor",
                "DataValidator"
            ]
            
            for component, name in zip(components, component_names):
                if component is None:
                    raise ValueError(f"Composant {name} non initialis√©")
                    
            logger.info("‚úÖ Tous les composants sont initialis√©s")
            
            # Test d'interaction : recherche -> extraction -> validation
            search_query = SearchQuery(
                locations=["Mont√©r√©gie"],
                property_types=[PropertyType.PLEX],
                price_min=150000,
                price_max=600000
            )
            
            # Utiliser le SearchManager
            search_results = await self.extractor.search_manager.search_with_pagination(search_query)
            
            if search_results:
                logger.info(f"‚úÖ SearchManager: {len(search_results)} r√©sultats trouv√©s")
                
                # Utiliser le SummaryExtractor
                summaries = await self.extractor.summary_extractor.extract_summaries_from_html(
                    search_results[0], search_query
                )
                
                if summaries:
                    logger.info(f"‚úÖ SummaryExtractor: {len(summaries)} r√©sum√©s extraits")
                    
                    # Utiliser le DataValidator
                    validation_result = await self.extractor.data_validator.validate_search_results(
                        summaries, search_query
                    )
                    
                    logger.info(f"‚úÖ DataValidator: validation termin√©e (ratio: {validation_result:.1f})")
                    
                    self.test_results.append(("Interaction composants", "SUCCESS", f"{len(summaries)} propri√©t√©s"))
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Aucun r√©sum√© extrait par SummaryExtractor")
                    self.test_results.append(("Interaction composants", "WARNING", "Pas de r√©sum√©s"))
                    return True
            else:
                logger.warning("‚ö†Ô∏è Aucun r√©sultat de recherche trouv√©")
                self.test_results.append(("Interaction composants", "WARNING", "Pas de r√©sultats"))
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'interaction des composants: {e}")
            self.test_results.append(("Interaction composants", "ERROR", str(e)))
            return False
            
    def _validate_summary_structure(self, summary):
        """Valide la structure d'un r√©sum√© de propri√©t√©"""
        required_fields = ['id', 'type', 'price', 'address', 'source', 'last_updated']
        
        for field in required_fields:
            if not hasattr(summary, field) or getattr(summary, field) is None:
                raise ValueError(f"Champ manquant ou null: {field}")
                
        # Validation sp√©cifique
        if summary.price <= 0:
            raise ValueError(f"Prix invalide: {summary.price}")
            
        if not summary.address.city:
            raise ValueError("Ville manquante dans l'adresse")
            
        logger.debug(f"‚úÖ R√©sum√© {summary.id} valid√©: {summary.type.value} - {summary.price}$")
        
    def _validate_property_structure(self, property_obj):
        """Valide la structure d'une propri√©t√© compl√®te"""
        required_fields = ['id', 'type', 'address', 'source', 'last_updated']
        
        for field in required_fields:
            if not hasattr(property_obj, field) or getattr(property_obj, field) is None:
                raise ValueError(f"Champ manquant ou null: {field}")
                
        # Validation des composants imbriqu√©s
        if not property_obj.address.city:
            raise ValueError("Ville manquante dans l'adresse")
            
        if property_obj.financial and property_obj.financial.price:
            if property_obj.financial.price <= 0:
                raise ValueError(f"Prix invalide: {property_obj.financial.price}")
                
        logger.debug(f"‚úÖ Propri√©t√© {property_obj.id} valid√©e: {property_obj.type.value}")
        
    def print_results(self):
        """Affiche les r√©sultats des tests"""
        logger.info("\n" + "="*60)
        logger.info("üìä R√âSULTATS DES TESTS D'INT√âGRATION SUR CAS R√âELS")
        logger.info("="*60)
        
        success_count = sum(1 for _, status, _ in self.test_results if status == "SUCCESS")
        warning_count = sum(1 for _, status, _ in self.test_results if status == "WARNING")
        error_count = sum(1 for _, status, _ in self.test_results if status == "ERROR")
        total_count = len(self.test_results)
        
        for test_name, status, details in self.test_results:
            if status == "SUCCESS":
                logger.info(f"‚úÖ {test_name}: {details}")
            elif status == "WARNING":
                logger.warning(f"‚ö†Ô∏è {test_name}: {details}")
            else:
                logger.error(f"‚ùå {test_name}: {details}")
                
        logger.info("-"*60)
        logger.info(f"üìà R√©sum√©: {success_count} succ√®s, {warning_count} avertissements, {error_count} erreurs")
        logger.info(f"üéØ Taux de r√©ussite: {(success_count + warning_count) / total_count * 100:.1f}%")
        
        if error_count == 0:
            logger.info("üéâ Tous les tests critiques ont r√©ussi !")
        else:
            logger.warning(f"‚ö†Ô∏è {error_count} test(s) critique(s) ont √©chou√©")
            
        logger.info("="*60)


async def run_real_integration_tests():
    """Ex√©cute tous les tests d'int√©gration sur cas r√©els"""
    logger.info("üöÄ D√©marrage des tests d'int√©gration sur cas r√©els...")
    
    test_suite = RealIntegrationTestSuite()
    
    try:
        # Configuration
        await test_suite.setup()
        
        # Tests
        tests = [
            test_suite.test_real_search_extraction,
            test_suite.test_real_detail_extraction,
            test_suite.test_real_validation_integration,
            test_suite.test_real_component_interaction
        ]
        
        for test in tests:
            try:
                await test()
            except Exception as e:
                logger.error(f"‚ùå Test {test.__name__} a √©chou√©: {e}")
                
        # Affichage des r√©sultats
        test_suite.print_results()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique lors des tests: {e}")
        
    finally:
        # Nettoyage
        await test_suite.cleanup()
        logger.info("üßπ Tests termin√©s et ressources nettoy√©es")


if __name__ == "__main__":
    asyncio.run(run_real_integration_tests())

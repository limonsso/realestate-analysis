#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TEST DU SYST√àME DE NETTOYAGE IMMOBILIER
===========================================

Script de test avec des donn√©es d'exemple pour valider le pipeline de nettoyage
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random
import os
import sys

# Ajouter le r√©pertoire courant au path
sys.path.append('.')

try:
    from real_estate_data_cleaning import RealEstateDataCleaner
    print("‚úÖ Script de nettoyage import√© avec succ√®s!")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("Assurez-vous que le fichier real_estate_data_cleaning.py est dans le m√™me r√©pertoire")
    sys.exit(1)


def create_sample_dataset(n_properties=100):
    """
    Cr√©e un dataset d'exemple avec des donn√©es r√©alistes mais probl√©matiques
    pour tester le syst√®me de nettoyage
    """
    print("üîß Cr√©ation du dataset d'exemple...")
    
    # Donn√©es de base
    cities = ['Montr√©al', 'Qu√©bec', 'Laval', 'Gatineau', 'Longueuil', 'Sherbrooke']
    regions = ['Mont√©r√©gie', 'Capitale-Nationale', 'Laval', 'Outaouais', 'Estrie']
    property_types = ['Maison unifamiliale', 'Condo', 'Duplex', 'Triplex', 'Appartement']
    
    # G√©n√©ration des donn√©es
    data = []
    
    for i in range(n_properties):
        # Identifiants
        property_id = f"PROP_{i:06d}"
        link = f"https://example.com/property/{i}"
        company = random.choice(['Centris', 'DuProprio', 'RE/MAX', 'Royal LePage'])
        version = random.choice(['v1', 'v2', 'v3'])
        
        # Dates (avec incoh√©rences)
        base_date = datetime.now() - timedelta(days=random.randint(1, 365))
        created_at = base_date
        updated_at = base_date + timedelta(days=random.randint(0, 30))
        update_at = base_date + timedelta(days=random.randint(0, 30))
        add_date = base_date + timedelta(days=random.randint(-5, 5))
        
        # Localisation
        city = random.choice(cities)
        region = random.choice(regions)
        address = f"{random.randint(100, 9999)} {random.choice(['Rue', 'Avenue', 'Boulevard'])} {city}"
        full_address = f"{address}, QC"
        
        # Coordonn√©es (avec quelques erreurs)
        if random.random() < 0.95:  # 95% de coordonn√©es valides
            longitude = random.uniform(-79.0, -56.0)  # Qu√©bec
            latitude = random.uniform(45.0, 62.0)
        else:  # 5% de coordonn√©es invalides
            longitude = random.uniform(-180, 180)
            latitude = random.uniform(-90, 90)
        
        # Prix et √©valuations
        base_price = random.randint(200000, 2000000)
        price = base_price + random.randint(-50000, 50000)
        
        # Revenus (avec variations de noms de colonnes)
        revenu = random.randint(1500, 8000) * 12 if random.random() < 0.7 else None
        plex_revenue = random.randint(2000, 10000) * 12 if random.random() < 0.6 else None
        plex_revenu = random.randint(1800, 9000) * 12 if random.random() < 0.5 else None
        
        # √âvaluations municipales
        municipal_evaluation_building = base_price * random.uniform(0.7, 1.3)
        municipal_evaluation_land = base_price * random.uniform(0.2, 0.5)
        municipal_evaluation_total = municipal_evaluation_building + municipal_evaluation_land
        
        # Taxes
        municipal_taxes = random.randint(2000, 8000)
        school_taxes = random.randint(1000, 4000)
        municipal_tax = municipal_taxes + random.randint(-500, 500)  # Doublon avec variation
        school_tax = school_taxes + random.randint(-200, 200)  # Doublon avec variation
        
        # Caract√©ristiques physiques
        surface = random.randint(800, 5000)
        living_area = surface + random.randint(-200, 200)  # Doublon avec variation
        construction_year = random.randint(1950, 2024)
        year_built = construction_year + random.randint(-2, 2)  # Doublon avec variation
        lot_size = surface * random.uniform(1.5, 3.0)
        
        # Propri√©t√©
        property_type = random.choice(property_types)
        bedrooms = random.randint(1, 6)
        nb_bedroom = bedrooms + random.randint(-1, 1)  # Doublon avec variation
        bathrooms = random.randint(1, 4)
        nb_bathroom = bathrooms + random.randint(-1, 1)  # Doublon avec variation
        units = random.randint(1, 8) if 'plex' in property_type.lower() else 1
        residential_units = units if 'plex' in property_type.lower() else 1
        commercial_units = random.randint(0, 2) if random.random() < 0.3 else 0
        
        # Autres
        parking = random.randint(0, 4)
        basement = random.choice(['Oui', 'Non', 'Partiel'])
        building_style = random.choice(['Moderne', 'Traditionnel', 'Contemporain', 'Victorian'])
        
        # D√©penses
        depenses = random.randint(500, 3000) * 12 if random.random() < 0.6 else None
        
        # Statut
        vendue = random.choice([True, False])
        
        # Description
        description = f"Belle propri√©t√© {property_type.lower()} √† {city} avec {bedrooms} chambres et {bathrooms} salles de bain."
        
        # Images
        img_src = f"https://example.com/images/property_{i}.jpg"
        image = img_src
        images = [img_src]
        
        # M√©tadonn√©es
        extraction_metadata = {
            "source": company,
            "extraction_date": base_date.isoformat(),
            "confidence": random.uniform(0.8, 1.0)
        }
        municipal_evaluation_year = random.randint(2018, 2024)
        
        # Cr√©er l'enregistrement
        property_record = {
            '_id': property_id,
            'link': link,
            'company': company,
            'version': version,
            'created_at': created_at,
            'updated_at': updated_at,
            'update_at': update_at,
            'add_date': add_date,
            'address': address,
            'full_address': full_address,
            'city': city,
            'region': region,
            'longitude': longitude,
            'latitude': latitude,
            'price': price,
            'revenu': revenu,
            'plex-revenue': plex_revenue,
            'plex-revenu': plex_revenu,
            'municipal_evaluation_building': municipal_evaluation_building,
            'municipal_evaluation_land': municipal_evaluation_land,
            'municipal_evaluation_total': municipal_evaluation_total,
            'municipal_taxes': municipal_taxes,
            'school_taxes': school_taxes,
            'municipal_tax': municipal_tax,
            'school_tax': school_tax,
            'surface': surface,
            'living_area': living_area,
            'construction_year': construction_year,
            'year_built': year_built,
            'lot_size': lot_size,
            'type': property_type,
            'bedrooms': bedrooms,
            'nb_bedroom': nb_bedroom,
            'bathrooms': bathrooms,
            'nb_bathroom': nb_bathroom,
            'unites': units,
            'residential_units': residential_units,
            'commercial_units': commercial_units,
            'parking': parking,
            'basement': basement,
            'building_style': building_style,
            'depenses': depenses,
            'vendue': vendue,
            'description': description,
            'img_src': img_src,
            'image': image,
            'images': images,
            'extraction_metadata': extraction_metadata,
            'municipal_evaluation_year': municipal_evaluation_year
        }
        
        data.append(property_record)
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(data)
    
    # Ajouter quelques doublons pour tester la d√©duplication
    if n_properties > 10:
        duplicates = df.head(5).copy()
        duplicates['_id'] = [f"DUPL_{i:06d}" for i in range(5)]
        df = pd.concat([df, duplicates], ignore_index=True)
    
    print(f"‚úÖ Dataset d'exemple cr√©√©: {df.shape}")
    return df


def test_cleaning_pipeline():
    """Teste le pipeline complet de nettoyage"""
    print("\nüß™ TEST DU PIPELINE COMPLET DE NETTOYAGE")
    print("=" * 50)
    
    # 1. Cr√©er le dataset d'exemple
    sample_df = create_sample_dataset(150)
    
    # 2. Sauvegarder temporairement
    temp_file = "sample_real_estate_data.csv"
    sample_df.to_csv(temp_file, index=False)
    print(f"üíæ Dataset d'exemple sauvegard√©: {temp_file}")
    
    # 3. Cr√©er le nettoyeur
    cleaner = RealEstateDataCleaner(input_file=temp_file)
    
    # 4. Ex√©cuter le pipeline complet
    print("\nüöÄ EX√âCUTION DU PIPELINE COMPLET...")
    success = cleaner.run_complete_cleaning_pipeline()
    
    if success:
        print("\nüéâ TEST R√âUSSI! Pipeline de nettoyage fonctionne correctement.")
        
        # Afficher les r√©sultats
        cleaned_df = cleaner.get_cleaned_data()
        print(f"\nüìä R√âSULTATS DU TEST:")
        print(f"  - Donn√©es originales: {len(sample_df)} propri√©t√©s")
        print(f"  - Donn√©es nettoy√©es: {len(cleaned_df)} propri√©t√©s")
        print(f"  - Colonnes originales: {len(sample_df.columns)}")
        print(f"  - Colonnes finales: {len(cleaned_df.columns)}")
        
        # Afficher quelques m√©triques
        if 'roi_brut' in cleaned_df.columns:
            roi_stats = cleaned_df['roi_brut'].describe()
            print(f"  - ROI brut moyen: {roi_stats['mean']:.2f}%")
        
        if 'completeness_score' in cleaned_df.columns:
            completeness_mean = cleaned_df['completeness_score'].mean()
            print(f"  - Score de compl√©tude moyen: {completeness_mean:.1f}%")
        
        # Afficher le rapport de qualit√©
        quality_report = cleaner.get_quality_report()
        if quality_report:
            print(f"\nüìã RAPPORT DE QUALIT√â:")
            print(f"  - Timestamp: {quality_report.get('timestamp', 'N/A')}")
            if 'dataset_info' in quality_report:
                info = quality_report['dataset_info']
                print(f"  - M√©moire utilis√©e: {info.get('memory_usage_mb', 0):.2f} MB")
        
        # Nettoyer les fichiers temporaires
        if os.path.exists(temp_file):
            os.remove(temp_file)
            print(f"\nüßπ Fichier temporaire supprim√©: {temp_file}")
        
        return True
    else:
        print("\n‚ùå TEST √âCHOU√â! Le pipeline de nettoyage a rencontr√© des erreurs.")
        return False


def test_individual_phases():
    """Teste chaque phase individuellement"""
    print("\nüî¨ TEST DES PHASES INDIVIDUELLES")
    print("=" * 40)
    
    # Cr√©er un petit dataset de test
    sample_df = create_sample_dataset(50)
    temp_file = "test_sample.csv"
    sample_df.to_csv(temp_file, index=False)
    
    # Cr√©er le nettoyeur
    cleaner = RealEstateDataCleaner(input_file=temp_file)
    
    # Test Phase 1: Audit
    print("\nüîç Test Phase 1: Audit et Diagnostic")
    if cleaner.load_data():
        audit_results = cleaner.phase1_audit_diagnostic()
        print(f"  ‚úÖ Audit r√©ussi: {len(audit_results)} analyses effectu√©es")
        
        # Test Phase 2: Nettoyage
        print("\nüõ†Ô∏è Test Phase 2: Nettoyage Intelligent")
        if cleaner.phase2_cleaning_intelligent():
            print(f"  ‚úÖ Nettoyage r√©ussi: {cleaner.df_cleaned.shape}")
            
            # Test Phase 3: Enrichissement
            print("\n‚ö° Test Phase 3: Enrichissement Intelligent")
            if cleaner.phase3_enrichment_intelligent():
                print(f"  ‚úÖ Enrichissement r√©ussi: {len(cleaner.df_cleaned.columns)} colonnes")
                
                # Test Phase 4: Validation
                print("\nüö® Test Phase 4: Validation et Contr√¥le Qualit√©")
                validation_results = cleaner.phase4_validation_quality_control()
                if validation_results:
                    print(f"  ‚úÖ Validation r√©ussie: {len(validation_results)} tests effectu√©s")
                    
                    # Test Phase 5: Pr√©paration
                    print("\nüéØ Test Phase 5: Pr√©paration pour l'Analyse")
                    if cleaner.phase5_preparation_analysis():
                        print("  ‚úÖ Pr√©paration r√©ussie")
                        print("  üéâ Toutes les phases test√©es avec succ√®s!")
                    else:
                        print("  ‚ùå Phase 5 √©chou√©e")
                else:
                    print("  ‚ùå Phase 4 √©chou√©e")
            else:
                print("  ‚ùå Phase 3 √©chou√©e")
        else:
            print("  ‚ùå Phase 2 √©chou√©e")
    else:
        print("  ‚ùå Phase 1 √©chou√©e")
    
    # Nettoyer
    if os.path.exists(temp_file):
        os.remove(temp_file)
    
    return True


if __name__ == "__main__":
    print("üß™ D√âMARRAGE DES TESTS DU SYST√àME DE NETTOYAGE")
    print("=" * 60)
    
    # Test des phases individuelles
    test_individual_phases()
    
    # Test du pipeline complet
    test_cleaning_pipeline()
    
    print("\nüéØ TESTS TERMIN√âS!")
    print("Le syst√®me de nettoyage est pr√™t √† √™tre utilis√© avec vos vraies donn√©es immobili√®res.")


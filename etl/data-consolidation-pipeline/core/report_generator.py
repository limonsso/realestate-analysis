#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä G√âN√âRATEUR DE RAPPORTS
==========================

G√®re la g√©n√©ration des rapports de qualit√©, similarit√©s et export
"""

import logging
import pandas as pd
from typing import Dict, List, Any, Optional
from pathlib import Path
import time
import json

logger = logging.getLogger(__name__)

class ReportGenerator:
    """
    G√©n√©rateur de rapports pour le pipeline ETL
    
    Responsable de la g√©n√©ration des rapports de qualit√©,
    de similarit√©s et d'export
    """
    
    def __init__(self, pipeline_manager):
        """
        Initialise le g√©n√©rateur de rapports
        
        Args:
            pipeline_manager: Instance du gestionnaire de pipeline
        """
        self.pipeline_manager = pipeline_manager
        self.reports = {}
    
    def generate_all_reports(self, df_initial: pd.DataFrame, df_final: pd.DataFrame,
                            initial_validation: Dict, final_validation: Dict,
                            similarity_groups: List, exported_files: Dict,
                            output_dir: str) -> Dict[str, str]:
        """
        G√©n√®re tous les rapports du pipeline
        
        Args:
            df_initial: DataFrame initial
            df_final: DataFrame final trait√©
            initial_validation: R√©sultats validation initiale
            final_validation: R√©sultats validation finale
            similarity_groups: Groupes de similarit√©s d√©tect√©s
            exported_files: Fichiers export√©s
            output_dir: R√©pertoire de sortie
            
        Returns:
            Dict avec les chemins des rapports g√©n√©r√©s
        """
        logger.info("üìä === PHASE 7: G√âN√âRATION DES RAPPORTS ===")
        
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        
        try:
            # === RAPPORT DE SIMILARIT√âS ===
            logger.info("üìä G√©n√©ration du rapport de similarit√©s...")
            similarity_report = self._generate_similarity_report(
                similarity_groups, output_path, timestamp
            )
            self.reports["similarity"] = similarity_report
            
            # === RAPPORT DE QUALIT√â ===
            logger.info("‚úÖ G√©n√©ration du rapport de qualit√©...")
            quality_report = self._generate_quality_report(
                initial_validation, final_validation, output_path, timestamp
            )
            self.reports["quality"] = quality_report
            
            # === RAPPORT D'EXPORT ===
            logger.info("üíæ G√©n√©ration du rapport d'export...")
            export_report = self._generate_export_report(
                exported_files, output_path, timestamp
            )
            self.reports["export"] = export_report
            
            # === RAPPORT COMPLET ===
            logger.info("üìã G√©n√©ration du rapport complet...")
            complete_report = self._generate_complete_report(
                df_initial, df_final, initial_validation, final_validation,
                similarity_groups, exported_files, output_path, timestamp
            )
            self.reports["complete"] = complete_report
            
            logger.info(f"‚úÖ {len(self.reports)} rapports g√©n√©r√©s dans {output_dir}")
            return self.reports
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration rapports: {e}")
            return {}
    
    def _generate_similarity_report(self, similarity_groups: List, 
                                   output_path: Path, timestamp: str) -> str:
        """G√©n√®re le rapport de similarit√©s"""
        try:
            if self.pipeline_manager.similarity_detector:
                # Utilisation du d√©tecteur de similarit√©s pour g√©n√©rer le rapport
                report_content = self.pipeline_manager.similarity_detector.generate_similarity_report(
                    similarity_groups, output_path, timestamp
                )
                return report_content
            else:
                # Rapport basique
                filename = f"similarity_report_{timestamp}.md"
                filepath = output_path / filename
                
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(f"# üìä Rapport de Similarit√©s - {timestamp}\n\n")
                    f.write(f"## üéØ Groupes de Similarit√©s D√©tect√©s\n\n")
                    f.write(f"**Total:** {len(similarity_groups)} groupes\n\n")
                    
                    for i, group in enumerate(similarity_groups, 1):
                        f.write(f"### Groupe {i}\n")
                        f.write(f"- **Colonnes:** {', '.join(group.get('columns', []))}\n")
                        f.write(f"- **Score de similarit√©:** {group.get('similarity_score', 'N/A')}\n")
                        f.write(f"- **Type de similarit√©:** {group.get('similarity_type', 'N/A')}\n\n")
                
                logger.info(f"üìÑ Rapport sauvegard√©: {filepath}")
                return str(filepath)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur rapport similarit√©s: {e}")
            return ""
    
    def _generate_quality_report(self, initial_validation: Dict, final_validation: Dict,
                                output_path: Path, timestamp: str) -> str:
        """G√©n√®re le rapport de qualit√©"""
        try:
            filename = f"quality_report_{timestamp}.md"
            filepath = output_path / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"# ‚úÖ Rapport de Qualit√© - {timestamp}\n\n")
                
                # Validation initiale
                f.write("## üìä Validation Initiale\n\n")
                f.write(f"- **Score global:** {initial_validation.get('overall_score', 0):.2%}\n")
                f.write(f"- **Statut:** {initial_validation.get('status', 'UNKNOWN')}\n")
                f.write(f"- **M√©triques:**\n")
                
                metrics = initial_validation.get('metrics', {})
                for metric_name, metric_value in metrics.items():
                    if isinstance(metric_value, (int, float)):
                        f.write(f"  - {metric_name}: {metric_value:.2f}\n")
                    else:
                        f.write(f"  - {metric_name}: {metric_value}\n")
                
                f.write("\n## üìä Validation Finale\n\n")
                f.write(f"- **Score global:** {final_validation.get('overall_score', 0):.2%}\n")
                f.write(f"- **Statut:** {final_validation.get('status', 'UNKNOWN')}\n")
                f.write(f"- **M√©triques:**\n")
                
                metrics = final_validation.get('metrics', {})
                for metric_name, metric_value in metrics.items():
                    if isinstance(metric_value, (int, float)):
                        f.write(f"  - {metric_name}: {metric_value:.2f}\n")
                    else:
                        f.write(f"  - {metric_name}: {metric_value}\n")
            
            logger.info(f"üìÑ Rapport de qualit√© sauvegard√©: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur rapport qualit√©: {e}")
            return ""
    
    def _generate_export_report(self, exported_files: Dict, 
                                output_path: Path, timestamp: str) -> str:
        """G√©n√®re le rapport d'export"""
        try:
            filename = f"export_report_{timestamp}.md"
            filepath = output_path / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"# üíæ Rapport d'Export - {timestamp}\n\n")
                f.write(f"## üìä R√©sum√© des Exports\n\n")
                f.write(f"- **Total formats:** {len(exported_files)}\n")
                f.write(f"- **Statut:** {'‚úÖ Succ√®s' if exported_files else '‚ùå √âchec'}\n\n")
                
                f.write("## üìÅ Fichiers Export√©s\n\n")
                for format_type, filepath_export in exported_files.items():
                    f.write(f"### {format_type.upper()}\n")
                    f.write(f"- **Chemin:** {filepath_export}\n")
                    f.write(f"- **Taille:** {Path(filepath_export).stat().st_size / 1024:.1f} KB\n\n")
            
            logger.info(f"üìÑ Rapport d'export sauvegard√©: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur rapport export: {e}")
            return ""
    
    def _generate_complete_report(self, df_initial: pd.DataFrame, df_final: pd.DataFrame,
                                 initial_validation: Dict, final_validation: Dict,
                                 similarity_groups: List, exported_files: Dict,
                                 output_path: Path, timestamp: str) -> str:
        """G√©n√®re le rapport complet du pipeline"""
        try:
            filename = f"pipeline_report_{timestamp}.md"
            filepath = output_path / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"# üöÄ Rapport Complet du Pipeline - {timestamp}\n\n")
                
                # R√©sum√© ex√©cutif
                f.write("## üìã R√©sum√© Ex√©cutif\n\n")
                f.write(f"- **Date d'ex√©cution:** {timestamp}\n")
                f.write(f"- **Donn√©es initiales:** {df_initial.shape[0]} lignes √ó {df_initial.shape[1]} colonnes\n")
                f.write(f"- **Donn√©es finales:** {df_final.shape[0]} lignes √ó {df_final.shape[1]} colonnes\n")
                f.write(f"- **R√©duction colonnes:** {((df_initial.shape[1] - df_final.shape[1]) / df_initial.shape[1]) * 100:.1f}%\n")
                f.write(f"- **Groupes de similarit√©s:** {len(similarity_groups)}\n")
                f.write(f"- **Formats export√©s:** {len(exported_files)}\n\n")
                
                # Qualit√© des donn√©es
                f.write("## ‚úÖ Qualit√© des Donn√©es\n\n")
                f.write(f"- **Score initial:** {initial_validation.get('overall_score', 0):.2%}\n")
                f.write(f"- **Score final:** {final_validation.get('overall_score', 0):.2%}\n")
                f.write(f"- **Am√©lioration:** {final_validation.get('overall_score', 0) - initial_validation.get('overall_score', 0):.2%}\n\n")
                
                # Similarit√©s d√©tect√©es
                f.write("## üß† Similarit√©s D√©tect√©es\n\n")
                for i, group in enumerate(similarity_groups, 1):
                    f.write(f"### Groupe {i}\n")
                    f.write(f"- **Colonnes:** {', '.join(group.get('columns', []))}\n")
                    f.write(f"- **Score:** {group.get('similarity_score', 'N/A')}\n\n")
                
                # Exports
                f.write("## üíæ Exports\n\n")
                for format_type, filepath_export in exported_files.items():
                    f.write(f"- **{format_type.upper()}:** {filepath_export}\n")
            
            logger.info(f"üìÑ Rapport complet sauvegard√©: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur rapport complet: {e}")
            return ""
    
    def get_reports_summary(self) -> Dict[str, Any]:
        """Retourne un r√©sum√© des rapports g√©n√©r√©s"""
        return {
            "total_reports": len(self.reports),
            "report_types": list(self.reports.keys()),
            "reports": self.reports,
            "generation_status": "success" if self.reports else "failed"
        }
